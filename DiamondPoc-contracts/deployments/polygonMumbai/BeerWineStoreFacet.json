{
  "address": "0x2b7C01904C5D84EEF811d4D557F08edd89016F92",
  "abi": [
    {
      "inputs": [],
      "name": "ItemNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ItemNotSoldAtStore",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        }
      ],
      "name": "NotContractOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnderageCustomer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "AlcoholAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBeer",
          "type": "string"
        }
      ],
      "name": "addAlcohol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "age",
          "type": "uint256"
        }
      ],
      "name": "buyAlcohol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBeerStoreItems",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "itemList",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAge",
          "type": "uint256"
        }
      ],
      "name": "setMinAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5cb6e8efc6b890830b2249810a818eb2b765ad98beb126ae34c7fdbec7a1cf69",
  "receipt": {
    "to": null,
    "from": "0xDe3089d40F3491De794fBb1ECA109fAc36F889d0",
    "contractAddress": "0x2b7C01904C5D84EEF811d4D557F08edd89016F92",
    "transactionIndex": 1,
    "gasUsed": "534916",
    "logsBloom": "0x
    "blockHash": "0x96a72d0cb112fa793ef7d066a4579116d875ad1ca633519855f5d6d72d47cea1",
    "transactionHash": "0x5cb6e8efc6b890830b2249810a818eb2b765ad98beb126ae34c7fdbec7a1cf69",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 29256726,
        "transactionHash": "0x5cb6e8efc6b890830b2249810a818eb2b765ad98beb126ae34c7fdbec7a1cf69",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000de3089d40f3491de794fbb1eca109fac36f889d0",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000446a1e1ff801000000000000000000000000000000000000000000000000006e117585e27b6b8000000000000000000000000000000000000000000000000722129002b75337800000000000000000000000000000000000000000000000006dcd0b67c2836a800000000000000000000000000000000000000000000000072256fa20d74b388",
        "logIndex": 2,
        "blockHash": "0x96a72d0cb112fa793ef7d066a4579116d875ad1ca633519855f5d6d72d47cea1"
      }
    ],
    "blockNumber": 29256726,
    "cumulativeGasUsed": "1057141",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0217810ba6203fb47863624cdcfce3e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ItemNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemNotSoldAtStore\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnderageCustomer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AlcoholAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBeer\",\"type\":\"string\"}],\"name\":\"addAlcohol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"buyAlcohol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeerStoreItems\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"itemList\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAge\",\"type\":\"uint256\"}],\"name\":\"setMinAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoC/facets/BeerWineStoreFacet.sol\":\"BeerWineStoreFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/PoC/facets/BeerWineStoreFacet.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// import base lib for Store\\nimport {LibStore} from \\\"../libraries/LibOthers.sol\\\";\\n// import to be able to interact with MeatStoreFacet\\nimport {LibBeerWineStore} from \\\"../libraries/LibOthers.sol\\\";\\n// import to be able to interact with \\\"enforcecontractowner\\\"\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\"; \\n// import counter as we using their library\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n\\ncontract BeerWineStoreFacet {\\n\\n    using Counters for Counters.Counter;\\n\\n    event AlcoholAdded(uint256 idx, string name);\\n\\n    function addAlcohol(string memory _newBeer) external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibStore.addItem(_newBeer,address(this));\\n    }\\n\\n    function buyAlcohol(uint256 _idx, uint256 age) external {\\n        LibBeerWineStore.enforceMinAge(age);\\n        LibStore.buyItem(_idx,address(this));\\n    } \\n\\n    function setMinAge(uint256 _minAge) external {\\n        LibBeerWineStore.diamondStorage().minAge = _minAge;\\n    }\\n    function getBeerStoreItems() external view returns (string[] memory itemList){\\n        itemList = LibStore.getItemsPerStore(address(this));\\n    }\\n}\",\"keccak256\":\"0x89ab14a80841dfa426fe6b3134086d9d319afe3e9ec2fef245fb6b3be277d078\"},\"contracts/PoC/interfaces/IDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com>, Twitter/Github: @mudgen\\n* EIP-2535 Diamonds\\n/******************************************************************************/\\n\\ninterface IDiamond {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0x1785467a8f0e289da4c60b03b9055b8acb6fe0747b423b7e5d3082e562947de2\",\"license\":\"CC0-1.0\"},\"contracts/PoC/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com>, Twitter/Github: @mudgen\\n* EIP-2535 Diamonds\\n/******************************************************************************/\\n\\nimport { IDiamond } from \\\"./IDiamond.sol\\\";\\n\\ninterface IDiamondCut is IDiamond {    \\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;    \\n}\\n\",\"keccak256\":\"0xed328a938a43c4fce96b8d05ce142a13497cab3a65c1e5cacfae3048053cbe1b\",\"license\":\"CC0-1.0\"},\"contracts/PoC/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com>, Twitter/Github: @mudgen\\n* EIP-2535 Diamonds\\n/******************************************************************************/\\nimport { IDiamond } from \\\"../interfaces/IDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror NoSelectorsGivenToAdd();\\nerror NotContractOwner(address _user, address _contractOwner);\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror NoBytecodeAtAddress(address _contractAddress, string _message);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndSelectorPosition {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n    }\\n\\n    struct DiamondStorage {\\n        // function selector => facet address and selector position in selectors array\\n        mapping(bytes4 => FacetAddressAndSelectorPosition) facetAddressAndSelectorPosition;\\n        bytes4[] selectors;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        //extra variables added\\n        string location;\\n        uint256 creationTimestamp;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        if(msg.sender != diamondStorage().contractOwner) {\\n            revert NotContractOwner(msg.sender, diamondStorage().contractOwner);\\n        }        \\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n            address facetAddress = _diamondCut[facetIndex].facetAddress;\\n            if(functionSelectors.length == 0) {\\n                revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n            }\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamond.FacetCutAction.Add) {\\n                addFunctions(facetAddress, functionSelectors);\\n            } else if (action == IDiamond.FacetCutAction.Replace) {\\n                replaceFunctions(facetAddress, functionSelectors);\\n            } else if (action == IDiamond.FacetCutAction.Remove) {\\n                removeFunctions(facetAddress, functionSelectors);\\n            } else {\\n                revert IncorrectFacetCutAction(uint8(action));\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n        if(_facetAddress == address(0)) {\\n            revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n        }\\n        DiamondStorage storage ds = diamondStorage();\\n        uint16 selectorCount = uint16(ds.selectors.length);                \\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n            if(oldFacetAddress != address(0)) {\\n                revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n            }            \\n            ds.facetAddressAndSelectorPosition[selector] = FacetAddressAndSelectorPosition(_facetAddress, selectorCount);\\n            ds.selectors.push(selector);\\n            selectorCount++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n        DiamondStorage storage ds = diamondStorage();\\n        if(_facetAddress == address(0)) {\\n            revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n        }\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n            // can't replace immutable functions -- functions defined directly in the diamond in this case\\n            if(oldFacetAddress == address(this)) {\\n                revert CannotReplaceImmutableFunction(selector);\\n            }\\n            if(oldFacetAddress == _facetAddress) {\\n                revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n            }\\n            if(oldFacetAddress == address(0)) {\\n                revert CannotReplaceFunctionThatDoesNotExists(selector);\\n            }\\n            // replace old facet address\\n            ds.facetAddressAndSelectorPosition[selector].facetAddress = _facetAddress;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 selectorCount = ds.selectors.length;\\n        if(_facetAddress != address(0)) {\\n            revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n        }        \\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            FacetAddressAndSelectorPosition memory oldFacetAddressAndSelectorPosition = ds.facetAddressAndSelectorPosition[selector];\\n            if(oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n                revert CannotRemoveFunctionThatDoesNotExist(selector);\\n            }\\n            \\n            \\n            // can't remove immutable functions -- functions defined directly in the diamond\\n            if(oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n                revert CannotRemoveImmutableFunction(selector);\\n            }\\n            // replace selector with last selector\\n            selectorCount--;\\n            if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n                bytes4 lastSelector = ds.selectors[selectorCount];\\n                ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n                ds.facetAddressAndSelectorPosition[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n            }\\n            // delete last selector\\n            ds.selectors.pop();\\n            delete ds.facetAddressAndSelectorPosition[selector];\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }        \\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        if(contractSize == 0) {\\n            revert NoBytecodeAtAddress(_contract, _errorMessage);\\n        }        \\n    }\\n}\\n\",\"keccak256\":\"0x71413973a969720dca1a57333fef861a1ca8d01d1711f1b7b748f502e95c9192\",\"license\":\"CC0-1.0\"},\"contracts/PoC/libraries/LibOthers.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nlibrary LibStore {\\n\\n    using Counters for Counters.Counter;\\n    error ItemNotSoldAtStore();\\n    error ItemNotAvailable();\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.store\\\");\\n    \\n\\n    struct StoreState {\\n\\n        Counters.Counter itemCounter;\\n        mapping(uint256 => string) productName;\\n        mapping(uint256 => bool) isProductAvailable;\\n        mapping(uint256 => address) productStore; // maps prodcut to allowed store\\n        mapping(uint256 => uint256) salesPerProduct;\\n        mapping(address => mapping(uint256 => uint256)) itemSalesPerCustomer;\\n        mapping(address => uint256) salesPerCustomer;\\n    }\\n\\n    function diamondStorage() internal pure returns (StoreState storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function  isStoreOfProduct(address store, uint256 _idx) internal view  {\\n        if(store != diamondStorage().productStore[_idx]){\\n            revert ItemNotSoldAtStore();\\n        }        \\n    }\\n\\n    function isProductAvailable(uint256 _idx) internal view {\\n        if(!diamondStorage().isProductAvailable[_idx]){\\n            revert ItemNotAvailable();\\n        }\\n    }\\n\\n    function getItemsPerStore(address storeAddr) internal view returns (string[] memory itemList){\\n        StoreState storage ds = diamondStorage();\\n        uint256 nItems = ds.itemCounter.current();\\n        itemList = new string[](nItems);\\n        uint256 i = 0;\\n        for(uint256 itemIndex = 1 ; itemIndex <= nItems ; itemIndex ++){\\n            if(storeAddr == address(0) || (ds.isProductAvailable[itemIndex] && ds.productStore[itemIndex] == storeAddr)){\\n                itemList[i]= ds.productName[itemIndex];\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function buyItem (uint256 _idx, address storeAddr) internal {\\n        isStoreOfProduct(storeAddr,_idx);\\n        isProductAvailable(_idx);\\n        StoreState storage  ds = diamondStorage();\\n        ds.salesPerProduct[_idx]++;\\n        ds.itemSalesPerCustomer[msg.sender][_idx]++;\\n        ds.salesPerCustomer[msg.sender]++;\\n    }\\n\\n    function addItem (string memory itemName, address storeAddr) internal {\\n        StoreState storage ds = diamondStorage();\\n        ds.itemCounter.increment();\\n        ds.productName[ds.itemCounter.current()] = itemName;\\n        ds.productStore[ds.itemCounter.current()] = storeAddr;\\n        ds.isProductAvailable[ds.itemCounter.current()] = true;\\n    }\\n}\\n\\nlibrary LibMeatStore {\\n\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.meat\\\");\\n  struct StoreState {\\n      string butcherName;\\n  }\\n\\n  function diamondStorage() internal pure returns (StoreState storage ds) {\\n      bytes32 position = DIAMOND_STORAGE_POSITION;\\n      assembly {\\n          ds.slot := position\\n      }\\n  }\\n\\n  function setButcherName (string memory _butcherName) internal {\\n    StoreState storage storeState = diamondStorage();\\n    storeState.butcherName = _butcherName;\\n  }\\n\\n  function getButcherName() internal view returns (string memory) {\\n    StoreState storage storeState = diamondStorage();\\n    return storeState.butcherName;\\n  }\\n\\n}\\n\\nlibrary LibBeerWineStore {\\n\\n  error UnderageCustomer();  \\n\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.beer\\\");\\n  struct StoreState {\\n      uint256 minAge;\\n  }\\n\\n  function diamondStorage() internal pure returns (StoreState storage ds) {\\n      bytes32 position = DIAMOND_STORAGE_POSITION;\\n      assembly {\\n          ds.slot := position\\n      }\\n  }\\n\\n  function setMinAge (uint256 _minAge) internal {\\n    StoreState storage storeState = diamondStorage();\\n    storeState.minAge = _minAge;\\n  }\\n\\n  function getMinAge() internal view returns (uint256) {\\n    StoreState storage storeState = diamondStorage();\\n    return storeState.minAge;\\n  }\\n\\n  function enforceMinAge(uint256 age) internal view {\\n    if(age < diamondStorage().minAge){\\n        revert UnderageCustomer();\\n    }    \\n  }\\n\\n\\n}\\n\\nlibrary LibPharmacyWineFacet {\\n\\n  error UnderageCustomer();  \\n\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.beer\\\");\\n  struct StoreState {\\n      bool needPrescription;\\n  }\\n\\n  function diamondStorage() internal pure returns (StoreState storage ds) {\\n      bytes32 position = DIAMOND_STORAGE_POSITION;\\n      assembly {\\n          ds.slot := position\\n      }\\n  }\\n\\n  function setNeedPrescription (bool _need) internal {\\n    StoreState storage storeState = diamondStorage();\\n    storeState.needPrescription = _need;\\n  }\\n\\n\\n  function enforcePrescription(bool hasPrescription) internal view {\\n    if(diamondStorage().needPrescription && !hasPrescription){\\n        revert UnderageCustomer();\\n    }    \\n  }\\n\\n\\n}\",\"keccak256\":\"0xe77763260527410233461c05151cca3c60605a10853659eb8defd32f766b69b7\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506108b7806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d66b8e814610051578063bdd33bf014610066578063c677efc214610084578063d34ff9c314610097575b600080fd5b61006461005f366004610683565b6100c9565b005b61006e6100de565b60405161007b9190610734565b60405180910390f35b6100646100923660046107cf565b6100ee565b6100646100a53660046107f1565b7ff352ba126091b494126fef2892c8da20801fd26146bd0cb5611cfe00f6dc924a55565b6100d1610105565b6100db813061018f565b50565b60606100e93061026f565b905090565b6100f781610422565b6101018230610464565b5050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600301546001600160a01b0316331461018d577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f5460408051600162bed83560e01b031981523360048201526001600160a01b039092166024830152519081900360440190fd5b565b7f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93e805460010180825560009081527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93f6020908152604090912084516101f6928601906105d4565b5081600382016000610206845490565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600181600201600061024b846000015490565b81526020810191909152604001600020805460ff1916911515919091179055505050565b7f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93e8054606091908067ffffffffffffffff8111156102af576102af61066d565b6040519080825280602002602001820160405280156102e257816020015b60608152602001906001900390816102cd5790505b509250600060015b828111610419576001600160a01b038616158061033d5750600081815260028501602052604090205460ff16801561033d575060008181526003850160205260409020546001600160a01b038781169116145b156104075760008181526001850160205260409020805461035d9061080a565b80601f01602080910402602001604051908101604052809291908181526020018280546103899061080a565b80156103d65780601f106103ab576101008083540402835291602001916103d6565b820191906000526020600020905b8154815290600101906020018083116103b957829003601f168201915b50505050508583815181106103ed576103ed610844565b602002602001018190525081806104039061085a565b9250505b806104118161085a565b9150506102ea565b50505050919050565b7ff352ba126091b494126fef2892c8da20801fd26146bd0cb5611cfe00f6dc924a548110156100db576040516302e3d90b60e01b815260040160405180910390fd5b61046e818361052d565b61047782610586565b60008281527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac9426020526040812080547f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93e929091906104d48361085a565b9091555050336000908152600582016020908152604080832086845290915281208054916105018361085a565b909155505033600090815260068201602052604081208054916105238361085a565b9190505550505050565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac94160205260409020546001600160a01b0383811691161461010157604051630306e2d560e31b815260040160405180910390fd5b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac940602052604090205460ff166100db57604051633c1c65a160e21b815260040160405180910390fd5b8280546105e09061080a565b90600052602060002090601f0160209004810192826106025760008555610648565b82601f1061061b57805160ff1916838001178555610648565b82800160010185558215610648579182015b8281111561064857825182559160200191906001019061062d565b50610654929150610658565b5090565b5b808211156106545760008155600101610659565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561069557600080fd5b813567ffffffffffffffff808211156106ad57600080fd5b818401915084601f8301126106c157600080fd5b8135818111156106d3576106d361066d565b604051601f8201601f19908116603f011681019083821181831017156106fb576106fb61066d565b8160405282815287602084870101111561071457600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156107c157888603603f1901855282518051808852835b81811015610791578281018a01518982018b01528901610776565b818111156107a157848a838b0101525b50601f01601f19169690960187019550938601939186019160010161075c565b509398975050505050505050565b600080604083850312156107e257600080fd5b50508035926020909101359150565b60006020828403121561080357600080fd5b5035919050565b600181811c9082168061081e57607f821691505b60208210810361083e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161087a57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220f2d4c6ad5178218403cb2362e675ae31c30549a29baeeaf3aec79d194cf1683064736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d66b8e814610051578063bdd33bf014610066578063c677efc214610084578063d34ff9c314610097575b600080fd5b61006461005f366004610683565b6100c9565b005b61006e6100de565b60405161007b9190610734565b60405180910390f35b6100646100923660046107cf565b6100ee565b6100646100a53660046107f1565b7ff352ba126091b494126fef2892c8da20801fd26146bd0cb5611cfe00f6dc924a55565b6100d1610105565b6100db813061018f565b50565b60606100e93061026f565b905090565b6100f781610422565b6101018230610464565b5050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600301546001600160a01b0316331461018d577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f5460408051600162bed83560e01b031981523360048201526001600160a01b039092166024830152519081900360440190fd5b565b7f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93e805460010180825560009081527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93f6020908152604090912084516101f6928601906105d4565b5081600382016000610206845490565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600181600201600061024b846000015490565b81526020810191909152604001600020805460ff1916911515919091179055505050565b7f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93e8054606091908067ffffffffffffffff8111156102af576102af61066d565b6040519080825280602002602001820160405280156102e257816020015b60608152602001906001900390816102cd5790505b509250600060015b828111610419576001600160a01b038616158061033d5750600081815260028501602052604090205460ff16801561033d575060008181526003850160205260409020546001600160a01b038781169116145b156104075760008181526001850160205260409020805461035d9061080a565b80601f01602080910402602001604051908101604052809291908181526020018280546103899061080a565b80156103d65780601f106103ab576101008083540402835291602001916103d6565b820191906000526020600020905b8154815290600101906020018083116103b957829003601f168201915b50505050508583815181106103ed576103ed610844565b602002602001018190525081806104039061085a565b9250505b806104118161085a565b9150506102ea565b50505050919050565b7ff352ba126091b494126fef2892c8da20801fd26146bd0cb5611cfe00f6dc924a548110156100db576040516302e3d90b60e01b815260040160405180910390fd5b61046e818361052d565b61047782610586565b60008281527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac9426020526040812080547f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93e929091906104d48361085a565b9091555050336000908152600582016020908152604080832086845290915281208054916105018361085a565b909155505033600090815260068201602052604081208054916105238361085a565b9190505550505050565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac94160205260409020546001600160a01b0383811691161461010157604051630306e2d560e31b815260040160405180910390fd5b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac940602052604090205460ff166100db57604051633c1c65a160e21b815260040160405180910390fd5b8280546105e09061080a565b90600052602060002090601f0160209004810192826106025760008555610648565b82601f1061061b57805160ff1916838001178555610648565b82800160010185558215610648579182015b8281111561064857825182559160200191906001019061062d565b50610654929150610658565b5090565b5b808211156106545760008155600101610659565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561069557600080fd5b813567ffffffffffffffff808211156106ad57600080fd5b818401915084601f8301126106c157600080fd5b8135818111156106d3576106d361066d565b604051601f8201601f19908116603f011681019083821181831017156106fb576106fb61066d565b8160405282815287602084870101111561071457600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b838110156107c157888603603f1901855282518051808852835b81811015610791578281018a01518982018b01528901610776565b818111156107a157848a838b0101525b50601f01601f19169690960187019550938601939186019160010161075c565b509398975050505050505050565b600080604083850312156107e257600080fd5b50508035926020909101359150565b60006020828403121561080357600080fd5b5035919050565b600181811c9082168061081e57607f821691505b60208210810361083e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161087a57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220f2d4c6ad5178218403cb2362e675ae31c30549a29baeeaf3aec79d194cf1683064736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}