{
  "address": "0xd1F41649c7D6B4E8195Da272fE5d9B4928E73331",
  "abi": [
    {
      "inputs": [],
      "name": "ItemNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ItemNotSoldAtStore",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        }
      ],
      "name": "NotContractOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "meatAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "meatRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newMeat",
          "type": "string"
        }
      ],
      "name": "addMeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "buyMeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getButcherName",
      "outputs": [
        {
          "internalType": "string",
          "name": "_butcherName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoreItems",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "itemList",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "removeMeat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newButcherName",
          "type": "string"
        }
      ],
      "name": "setButcherName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79261d9e0a11dae94ca6185ba0f7df273476449c7112e65b0b09e7f638536907",
  "receipt": {
    "to": null,
    "from": "0xDe3089d40F3491De794fBb1ECA109fAc36F889d0",
    "contractAddress": "0xd1F41649c7D6B4E8195Da272fE5d9B4928E73331",
    "transactionIndex": 8,
    "gasUsed": "609397",
    "logsBloom": "0x
    "blockHash": "0x3ab534760629b943f74bd44cec74e42cdaea997c8d28b801d480288ed07f3235",
    "transactionHash": "0x79261d9e0a11dae94ca6185ba0f7df273476449c7112e65b0b09e7f638536907",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 29256524,
        "transactionHash": "0x79261d9e0a11dae94ca6185ba0f7df273476449c7112e65b0b09e7f638536907",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000de3089d40f3491de794fbb1eca109fac36f889d0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003928063786c5400000000000000000000000000000000000000000000000006efc3685155ce8c00000000000000000000000000000000000000000000277fd0aea52103438fd000000000000000000000000000000000000000000000000006ec30e7eddd623800000000000000000000000000000000000000000000277fd0b237a166bbfc24",
        "logIndex": 33,
        "blockHash": "0x3ab534760629b943f74bd44cec74e42cdaea997c8d28b801d480288ed07f3235"
      }
    ],
    "blockNumber": 29256524,
    "cumulativeGasUsed": "3327799",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0217810ba6203fb47863624cdcfce3e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ItemNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ItemNotSoldAtStore\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"meatAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"meatRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newMeat\",\"type\":\"string\"}],\"name\":\"addMeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"buyMeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getButcherName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_butcherName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreItems\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"itemList\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"removeMeat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newButcherName\",\"type\":\"string\"}],\"name\":\"setButcherName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoC/facets/MeatStoreFacet.sol\":\"MeatStoreFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/PoC/facets/MeatStoreFacet.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// import basic store lib\\nimport {LibStore} from \\\"../libraries/LibOthers.sol\\\";\\n// import to be able to interact with MeatStoreFacet\\nimport {LibMeatStore} from \\\"../libraries/LibOthers.sol\\\";\\n// import to be able to interact with \\\"enforcecontractowner\\\"\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\"; \\n// import some contracts we want to read functions from\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract MeatStoreFacet {\\n\\n    event meatAdded(uint256 idx, string name);\\n    event meatRemoved(uint256 idx);\\n    using Counters for Counters.Counter;\\n\\n    function setButcherName (string memory _newButcherName) external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibMeatStore.setButcherName(_newButcherName);\\n    }   \\n    function getButcherName() external view returns (string memory _butcherName) {\\n        _butcherName = LibMeatStore.getButcherName();\\n    }\\n    function buyMeat(uint256 _idx) external {\\n        LibStore.buyItem(_idx,address(this));\\n    }\\n    function addMeat(string memory _newMeat) external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibStore.addItem(_newMeat, address(this));\\n    }\\n\\n    function removeMeat(uint256 _idx) external {\\n        LibDiamond.enforceIsContractOwner();\\n        LibStore.StoreState storage ds = LibStore.diamondStorage();\\n        ds.isProductAvailable[_idx] = false;\\n        emit meatRemoved(_idx);\\n\\n    }\\n\\n    function getStoreItems() external view returns (string[] memory itemList){\\n        itemList = LibStore.getItemsPerStore(address(this));\\n    }\\n\\n}\",\"keccak256\":\"0x4124cd8d845f3c0c29e2b580af5623109bb0db868e673572d73c83b494367b96\"},\"contracts/PoC/interfaces/IDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com>, Twitter/Github: @mudgen\\n* EIP-2535 Diamonds\\n/******************************************************************************/\\n\\ninterface IDiamond {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0x1785467a8f0e289da4c60b03b9055b8acb6fe0747b423b7e5d3082e562947de2\",\"license\":\"CC0-1.0\"},\"contracts/PoC/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com>, Twitter/Github: @mudgen\\n* EIP-2535 Diamonds\\n/******************************************************************************/\\n\\nimport { IDiamond } from \\\"./IDiamond.sol\\\";\\n\\ninterface IDiamondCut is IDiamond {    \\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;    \\n}\\n\",\"keccak256\":\"0xed328a938a43c4fce96b8d05ce142a13497cab3a65c1e5cacfae3048053cbe1b\",\"license\":\"CC0-1.0\"},\"contracts/PoC/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com>, Twitter/Github: @mudgen\\n* EIP-2535 Diamonds\\n/******************************************************************************/\\nimport { IDiamond } from \\\"../interfaces/IDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror NoSelectorsGivenToAdd();\\nerror NotContractOwner(address _user, address _contractOwner);\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror NoBytecodeAtAddress(address _contractAddress, string _message);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndSelectorPosition {\\n        address facetAddress;\\n        uint16 selectorPosition;\\n    }\\n\\n    struct DiamondStorage {\\n        // function selector => facet address and selector position in selectors array\\n        mapping(bytes4 => FacetAddressAndSelectorPosition) facetAddressAndSelectorPosition;\\n        bytes4[] selectors;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n        //extra variables added\\n        string location;\\n        uint256 creationTimestamp;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        if(msg.sender != diamondStorage().contractOwner) {\\n            revert NotContractOwner(msg.sender, diamondStorage().contractOwner);\\n        }        \\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n            address facetAddress = _diamondCut[facetIndex].facetAddress;\\n            if(functionSelectors.length == 0) {\\n                revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n            }\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamond.FacetCutAction.Add) {\\n                addFunctions(facetAddress, functionSelectors);\\n            } else if (action == IDiamond.FacetCutAction.Replace) {\\n                replaceFunctions(facetAddress, functionSelectors);\\n            } else if (action == IDiamond.FacetCutAction.Remove) {\\n                removeFunctions(facetAddress, functionSelectors);\\n            } else {\\n                revert IncorrectFacetCutAction(uint8(action));\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n        if(_facetAddress == address(0)) {\\n            revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n        }\\n        DiamondStorage storage ds = diamondStorage();\\n        uint16 selectorCount = uint16(ds.selectors.length);                \\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Add facet has no code\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n            if(oldFacetAddress != address(0)) {\\n                revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n            }            \\n            ds.facetAddressAndSelectorPosition[selector] = FacetAddressAndSelectorPosition(_facetAddress, selectorCount);\\n            ds.selectors.push(selector);\\n            selectorCount++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n        DiamondStorage storage ds = diamondStorage();\\n        if(_facetAddress == address(0)) {\\n            revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n        }\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: Replace facet has no code\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.facetAddressAndSelectorPosition[selector].facetAddress;\\n            // can't replace immutable functions -- functions defined directly in the diamond in this case\\n            if(oldFacetAddress == address(this)) {\\n                revert CannotReplaceImmutableFunction(selector);\\n            }\\n            if(oldFacetAddress == _facetAddress) {\\n                revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n            }\\n            if(oldFacetAddress == address(0)) {\\n                revert CannotReplaceFunctionThatDoesNotExists(selector);\\n            }\\n            // replace old facet address\\n            ds.facetAddressAndSelectorPosition[selector].facetAddress = _facetAddress;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {        \\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 selectorCount = ds.selectors.length;\\n        if(_facetAddress != address(0)) {\\n            revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n        }        \\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            FacetAddressAndSelectorPosition memory oldFacetAddressAndSelectorPosition = ds.facetAddressAndSelectorPosition[selector];\\n            if(oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n                revert CannotRemoveFunctionThatDoesNotExist(selector);\\n            }\\n            \\n            \\n            // can't remove immutable functions -- functions defined directly in the diamond\\n            if(oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n                revert CannotRemoveImmutableFunction(selector);\\n            }\\n            // replace selector with last selector\\n            selectorCount--;\\n            if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n                bytes4 lastSelector = ds.selectors[selectorCount];\\n                ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n                ds.facetAddressAndSelectorPosition[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n            }\\n            // delete last selector\\n            ds.selectors.pop();\\n            delete ds.facetAddressAndSelectorPosition[selector];\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");        \\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }        \\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        if(contractSize == 0) {\\n            revert NoBytecodeAtAddress(_contract, _errorMessage);\\n        }        \\n    }\\n}\\n\",\"keccak256\":\"0x71413973a969720dca1a57333fef861a1ca8d01d1711f1b7b748f502e95c9192\",\"license\":\"CC0-1.0\"},\"contracts/PoC/libraries/LibOthers.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nlibrary LibStore {\\n\\n    using Counters for Counters.Counter;\\n    error ItemNotSoldAtStore();\\n    error ItemNotAvailable();\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.store\\\");\\n    \\n\\n    struct StoreState {\\n\\n        Counters.Counter itemCounter;\\n        mapping(uint256 => string) productName;\\n        mapping(uint256 => bool) isProductAvailable;\\n        mapping(uint256 => address) productStore; // maps prodcut to allowed store\\n        mapping(uint256 => uint256) salesPerProduct;\\n        mapping(address => mapping(uint256 => uint256)) itemSalesPerCustomer;\\n        mapping(address => uint256) salesPerCustomer;\\n    }\\n\\n    function diamondStorage() internal pure returns (StoreState storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function  isStoreOfProduct(address store, uint256 _idx) internal view  {\\n        if(store != diamondStorage().productStore[_idx]){\\n            revert ItemNotSoldAtStore();\\n        }        \\n    }\\n\\n    function isProductAvailable(uint256 _idx) internal view {\\n        if(!diamondStorage().isProductAvailable[_idx]){\\n            revert ItemNotAvailable();\\n        }\\n    }\\n\\n    function getItemsPerStore(address storeAddr) internal view returns (string[] memory itemList){\\n        StoreState storage ds = diamondStorage();\\n        uint256 nItems = ds.itemCounter.current();\\n        itemList = new string[](nItems);\\n        uint256 i = 0;\\n        for(uint256 itemIndex = 1 ; itemIndex <= nItems ; itemIndex ++){\\n            if(storeAddr == address(0) || (ds.isProductAvailable[itemIndex] && ds.productStore[itemIndex] == storeAddr)){\\n                itemList[i]= ds.productName[itemIndex];\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function buyItem (uint256 _idx, address storeAddr) internal {\\n        isStoreOfProduct(storeAddr,_idx);\\n        isProductAvailable(_idx);\\n        StoreState storage  ds = diamondStorage();\\n        ds.salesPerProduct[_idx]++;\\n        ds.itemSalesPerCustomer[msg.sender][_idx]++;\\n        ds.salesPerCustomer[msg.sender]++;\\n    }\\n\\n    function addItem (string memory itemName, address storeAddr) internal {\\n        StoreState storage ds = diamondStorage();\\n        ds.itemCounter.increment();\\n        ds.productName[ds.itemCounter.current()] = itemName;\\n        ds.productStore[ds.itemCounter.current()] = storeAddr;\\n        ds.isProductAvailable[ds.itemCounter.current()] = true;\\n    }\\n}\\n\\nlibrary LibMeatStore {\\n\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.meat\\\");\\n  struct StoreState {\\n      string butcherName;\\n  }\\n\\n  function diamondStorage() internal pure returns (StoreState storage ds) {\\n      bytes32 position = DIAMOND_STORAGE_POSITION;\\n      assembly {\\n          ds.slot := position\\n      }\\n  }\\n\\n  function setButcherName (string memory _butcherName) internal {\\n    StoreState storage storeState = diamondStorage();\\n    storeState.butcherName = _butcherName;\\n  }\\n\\n  function getButcherName() internal view returns (string memory) {\\n    StoreState storage storeState = diamondStorage();\\n    return storeState.butcherName;\\n  }\\n\\n}\\n\\nlibrary LibBeerWineStore {\\n\\n  error UnderageCustomer();  \\n\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.beer\\\");\\n  struct StoreState {\\n      uint256 minAge;\\n  }\\n\\n  function diamondStorage() internal pure returns (StoreState storage ds) {\\n      bytes32 position = DIAMOND_STORAGE_POSITION;\\n      assembly {\\n          ds.slot := position\\n      }\\n  }\\n\\n  function setMinAge (uint256 _minAge) internal {\\n    StoreState storage storeState = diamondStorage();\\n    storeState.minAge = _minAge;\\n  }\\n\\n  function getMinAge() internal view returns (uint256) {\\n    StoreState storage storeState = diamondStorage();\\n    return storeState.minAge;\\n  }\\n\\n  function enforceMinAge(uint256 age) internal view {\\n    if(age < diamondStorage().minAge){\\n        revert UnderageCustomer();\\n    }    \\n  }\\n\\n\\n}\\n\\nlibrary LibPharmacyWineFacet {\\n\\n  error UnderageCustomer();  \\n\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.beer\\\");\\n  struct StoreState {\\n      bool needPrescription;\\n  }\\n\\n  function diamondStorage() internal pure returns (StoreState storage ds) {\\n      bytes32 position = DIAMOND_STORAGE_POSITION;\\n      assembly {\\n          ds.slot := position\\n      }\\n  }\\n\\n  function setNeedPrescription (bool _need) internal {\\n    StoreState storage storeState = diamondStorage();\\n    storeState.needPrescription = _need;\\n  }\\n\\n\\n  function enforcePrescription(bool hasPrescription) internal view {\\n    if(diamondStorage().needPrescription && !hasPrescription){\\n        revert UnderageCustomer();\\n    }    \\n  }\\n\\n\\n}\",\"keccak256\":\"0xe77763260527410233461c05151cca3c60605a10853659eb8defd32f766b69b7\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a10806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063084b5069146100675780632d9088bd1461007c57806331f5a14a1461009a578063434d1c98146100af578063661c5780146100c2578063a986d48a146100d5575b600080fd5b61007a61007536600461079a565b6100e8565b005b61008461016d565b6040516100919190610800565b60405180910390f35b6100a261017d565b6040516100919190610862565b61007a6100bd36600461079a565b610187565b61007a6100d0366004610892565b610194565b61007a6100e3366004610892565b6101a6565b6100f06101b7565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac9406020908152604091829020805460ff1916905590518281526000805160206109bb833981519152917f95a7d0589327ee45472a652c32c9315e86ec14ec4c2c97003af8a0eb6b0fa074910160405180910390a15050565b606061017830610241565b905090565b60606101786103e2565b6101918130610498565b50565b61019c6101b7565b610191813061054f565b6101ae6101b7565b6101918161061d565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600301546001600160a01b0316331461023f577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f5460408051600162bed83560e01b031981523360048201526001600160a01b039092166024830152519081900360440190fd5b565b6000805160206109bb8339815191528054606091908067ffffffffffffffff81111561026f5761026f61087c565b6040519080825280602002602001820160405280156102a257816020015b606081526020019060019003908161028d5790505b509250600060015b8281116103d9576001600160a01b03861615806102fd5750600081815260028501602052604090205460ff1680156102fd575060008181526003850160205260409020546001600160a01b038781169116145b156103c75760008181526001850160205260409020805461031d90610943565b80601f016020809104026020016040519081016040528092919081815260200182805461034990610943565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b50505050508583815181106103ad576103ad61097d565b602002602001018190525081806103c390610993565b9250505b806103d181610993565b9150506102aa565b50505050919050565b7fb52d88f0c7e24f6a206036c0ee87f7de87b496cd31bef73246b85956058c7299805460609190819061041490610943565b80601f016020809104026020016040519081016040528092919081815260200182805461044090610943565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b505050505091505090565b6104a28183610656565b6104ab826106b3565b60008281527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac9426020526040812080546000805160206109bb833981519152929091906104f683610993565b90915550503360009081526005820160209081526040808320868452909152812080549161052383610993565b9091555050336000908152600682016020526040812080549161054583610993565b9190505550505050565b6000805160206109bb833981519152805460010180825560009081527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93f6020908152604090912084516105a492860190610701565b50816003820160006105b4845490565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060018160020160006105f9846000015490565b81526020810191909152604001600020805460ff1916911515919091179055505050565b80517fb52d88f0c7e24f6a206036c0ee87f7de87b496cd31bef73246b85956058c7299906106519082906020850190610701565b505050565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac94160205260409020546001600160a01b038381169116146106af57604051630306e2d560e31b815260040160405180910390fd5b5050565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac940602052604090205460ff1661019157604051633c1c65a160e21b815260040160405180910390fd5b82805461070d90610943565b90600052602060002090601f01602090048101928261072f5760008555610775565b82601f1061074857805160ff1916838001178555610775565b82800160010185558215610775579182015b8281111561077557825182559160200191906001019061075a565b50610781929150610785565b5090565b5b808211156107815760008155600101610786565b6000602082840312156107ac57600080fd5b5035919050565b6000815180845260005b818110156107d9576020818501810151868301820152016107bd565b818111156107eb576000602083870101525b50601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561085557603f198886030184526108438583516107b3565b94509285019290850190600101610827565b5092979650505050505050565b60208152600061087560208301846107b3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156108a457600080fd5b813567ffffffffffffffff808211156108bc57600080fd5b818401915084601f8301126108d057600080fd5b8135818111156108e2576108e261087c565b604051601f8201601f19908116603f0116810190838211818310171561090a5761090a61087c565b8160405282815287602084870101111561092357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061095757607f821691505b60208210810361097757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016109b357634e487b7160e01b600052601160045260246000fd5b506001019056fe3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93ea26469706673582212203c3a08e36b69932c9bfb1fdbdf7590152957280d8a047f9c033b3026acd09e8264736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063084b5069146100675780632d9088bd1461007c57806331f5a14a1461009a578063434d1c98146100af578063661c5780146100c2578063a986d48a146100d5575b600080fd5b61007a61007536600461079a565b6100e8565b005b61008461016d565b6040516100919190610800565b60405180910390f35b6100a261017d565b6040516100919190610862565b61007a6100bd36600461079a565b610187565b61007a6100d0366004610892565b610194565b61007a6100e3366004610892565b6101a6565b6100f06101b7565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac9406020908152604091829020805460ff1916905590518281526000805160206109bb833981519152917f95a7d0589327ee45472a652c32c9315e86ec14ec4c2c97003af8a0eb6b0fa074910160405180910390a15050565b606061017830610241565b905090565b60606101786103e2565b6101918130610498565b50565b61019c6101b7565b610191813061054f565b6101ae6101b7565b6101918161061d565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600301546001600160a01b0316331461023f577fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f5460408051600162bed83560e01b031981523360048201526001600160a01b039092166024830152519081900360440190fd5b565b6000805160206109bb8339815191528054606091908067ffffffffffffffff81111561026f5761026f61087c565b6040519080825280602002602001820160405280156102a257816020015b606081526020019060019003908161028d5790505b509250600060015b8281116103d9576001600160a01b03861615806102fd5750600081815260028501602052604090205460ff1680156102fd575060008181526003850160205260409020546001600160a01b038781169116145b156103c75760008181526001850160205260409020805461031d90610943565b80601f016020809104026020016040519081016040528092919081815260200182805461034990610943565b80156103965780601f1061036b57610100808354040283529160200191610396565b820191906000526020600020905b81548152906001019060200180831161037957829003601f168201915b50505050508583815181106103ad576103ad61097d565b602002602001018190525081806103c390610993565b9250505b806103d181610993565b9150506102aa565b50505050919050565b7fb52d88f0c7e24f6a206036c0ee87f7de87b496cd31bef73246b85956058c7299805460609190819061041490610943565b80601f016020809104026020016040519081016040528092919081815260200182805461044090610943565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b505050505091505090565b6104a28183610656565b6104ab826106b3565b60008281527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac9426020526040812080546000805160206109bb833981519152929091906104f683610993565b90915550503360009081526005820160209081526040808320868452909152812080549161052383610993565b9091555050336000908152600682016020526040812080549161054583610993565b9190505550505050565b6000805160206109bb833981519152805460010180825560009081527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93f6020908152604090912084516105a492860190610701565b50816003820160006105b4845490565b815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060018160020160006105f9846000015490565b81526020810191909152604001600020805460ff1916911515919091179055505050565b80517fb52d88f0c7e24f6a206036c0ee87f7de87b496cd31bef73246b85956058c7299906106519082906020850190610701565b505050565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac94160205260409020546001600160a01b038381169116146106af57604051630306e2d560e31b815260040160405180910390fd5b5050565b60008181527f3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac940602052604090205460ff1661019157604051633c1c65a160e21b815260040160405180910390fd5b82805461070d90610943565b90600052602060002090601f01602090048101928261072f5760008555610775565b82601f1061074857805160ff1916838001178555610775565b82800160010185558215610775579182015b8281111561077557825182559160200191906001019061075a565b50610781929150610785565b5090565b5b808211156107815760008155600101610786565b6000602082840312156107ac57600080fd5b5035919050565b6000815180845260005b818110156107d9576020818501810151868301820152016107bd565b818111156107eb576000602083870101525b50601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561085557603f198886030184526108438583516107b3565b94509285019290850190600101610827565b5092979650505050505050565b60208152600061087560208301846107b3565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156108a457600080fd5b813567ffffffffffffffff808211156108bc57600080fd5b818401915084601f8301126108d057600080fd5b8135818111156108e2576108e261087c565b604051601f8201601f19908116603f0116810190838211818310171561090a5761090a61087c565b8160405282815287602084870101111561092357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061095757607f821691505b60208210810361097757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016109b357634e487b7160e01b600052601160045260246000fd5b506001019056fe3e1203f9e3017e885f293b2817c8cf13c3f1a69d3fb206a868b5d52ad69ac93ea26469706673582212203c3a08e36b69932c9bfb1fdbdf7590152957280d8a047f9c033b3026acd09e8264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}